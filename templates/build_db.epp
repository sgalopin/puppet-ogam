#!/bin/bash
set -e
set -o pipefail

# Default configuration :
environment=production

while [ "x$1" != "x"  ]
do
  case "$1" in
      "--env" | "-e" )
          shift
          environment=$1
          shift
          ;;
      "--help" | "-h" | * )
          echo "Install Ogam's database"
          echo "  Usage : $(basename $0) [options]"
          echo "    Options :"
          echo "      -e, --env    : Build environment [development, production] (default: « $environment »)"
          echo "      -h, --help   : Print help information and exit"
          exit
          ;;
  esac
done

echo "-- Installation of Ogam's database (env=$environment)"

echo "-- Drop the old database"
dropdb -w -U postgres -h localhost --if-exists ogam

echo "-- UTF8 Database creation"
createdb -w -U postgres -h localhost -E UTF8 ogam

echo "-- Add-ons"
psql -qw -U postgres -h localhost -d ogam -c "CREATE EXTENSION postgis"

echo "-- Scripts"
psql -qw -U postgres -h localhost -d ogam -f "<%= $ogam::git_clone_directory %>/database/1-Create_mapping_schema.sql"
psql -qw -U postgres -h localhost -d ogam -f "<%= $ogam::git_clone_directory %>/database/1-Create_metadata_schema.sql"
psql -qw -U postgres -h localhost -d ogam -f "<%= $ogam::git_clone_directory %>/database/1-Create_raw_data_schema.sql"
psql -qw -U postgres -h localhost -d ogam -f "<%= $ogam::git_clone_directory %>/database/1-Create_referentiels_schema.sql"
psql -qw -U postgres -h localhost -d ogam -f "<%= $ogam::git_clone_directory %>/database/1-Create_website_schema.sql"
cd <%= $ogam::git_clone_directory %>/database
psql -qw -U postgres -h localhost -d ogam -f "<%= $ogam::git_clone_directory %>/database/2-Import_ModTaxRef-v8.0.sql"
if [ "$environment" = "development" ]; then
  psql -qw -U postgres -h localhost -d ogam -f "<%= $ogam::git_clone_directory %>/database/2-Import_ModTaxRef-Test.sql"
fi
psql -qw -U postgres -h localhost -d ogam -f "<%= $ogam::git_clone_directory %>/database/2-Populate_mapping_schema.sql"
psql -qw -U postgres -h localhost -d ogam -f "<%= $ogam::git_clone_directory %>/database/Referentiels/communes.sql"
psql -qw -U postgres -h localhost -d ogam -f "<%= $ogam::git_clone_directory %>/database/Referentiels/departements.sql"
psql -qw -U postgres -h localhost -d ogam -f "<%= $ogam::git_clone_directory %>/database/Referentiels/nuts_0.sql"
cd <%= $ogam::git_clone_directory %>/database/Metadata
psql -qw -U postgres -h localhost -d ogam -f "<%= $ogam::git_clone_directory %>/database/Metadata/import_from_csv.sql"
psql -qw -U postgres -h localhost -d ogam -f "<%= $ogam::git_clone_directory %>/database/2-Populate_website_schema.sql"
psql -qw -U postgres -h localhost -d ogam -f "<%= $ogam::git_clone_directory %>/database/3-Checks.sql"
psql -qw -U postgres -h localhost -d ogam -f "<%= $ogam::git_clone_directory %>/database/4-Processing.sql"
psql -qw -U postgres -h localhost -d ogam -f "<%= $ogam::git_clone_directory %>/database/4-EventListener.sql"
psql -qw -U postgres -h localhost -d ogam -f "<%= $ogam::git_clone_directory %>/database/5-Create_user.sql"
psql -qw -U postgres -h localhost -d ogam -c "GRANT CONNECT ON DATABASE ogam TO ogam;"

echo "-- Overriding defaut config values"
psql -qw -U postgres -h localhost -d ogam -c "UPDATE website.application_parameters SET value = '<%= $ogam::tmp_directory %>/ogam_upload' WHERE name = 'UploadDirectory';"
psql -qw -U postgres -h localhost -d ogam -c "UPDATE website.application_parameters SET value = '<%= $ogam::tmp_directory %>/upload' WHERE name = 'uploadDir';"
psql -qw -U postgres -h localhost -d ogam -c "UPDATE website.application_parameters SET value = '<%= $ogam::tmp_directory %>/upload/images/' WHERE name = 'image_upload_dir';"
psql -qw -U postgres -h localhost -d ogam -c "UPDATE mapping.layer_service SET config = '{\"urls\":[\"http://<%= $ogam::vhost_servername %>/mapserverProxy.php?\"],\"params\":{\"SERVICE\":\"WMS\",\"VERSION\":\"1.1.1\",\"REQUEST\":\"GetMap\"}}' WHERE name = 'Local_MapProxy_Mapserv_WMS_GetMap';"
psql -qw -U postgres -h localhost -d ogam -c "UPDATE mapping.layer_service SET config = '{\"urls\":[\"http://<%= $ogam::vhost_servername %>/tilecacheProxy.php?\"],\"params\":{\"SERVICE\":\"WMS\",\"VERSION\":\"1.1.1\",\"REQUEST\":\"GetMap\"}}' WHERE name = 'Local_MapProxy_Tilecache_WMS_GetMap';"
psql -qw -U postgres -h localhost -d ogam -c "UPDATE mapping.layer_service SET config = '{\"urls\":[\"http://<%= $ogam::vhost_servername %>/mapserverProxy.php?\"],\"params\":{\"SERVICE\":\"WFS\",\"VERSION\":\"1.1.0\",\"REQUEST\":\"GetFeature\"}}' WHERE name = 'Local_MapProxy_WFS_GetFeature';"
psql -qw -U postgres -h localhost -d ogam -c "UPDATE mapping.layer_service SET config = '{\"urls\":[\"http://<%= $ogam::vhost_servername %>/mapserverProxy.php?\"],\"params\":{\"SERVICE\":\"WMS\",\"VERSION\":\"1.1.1\",\"REQUEST\":\"GetLegendGraphic\"}}' WHERE name = 'Local_MapProxy_WMS_GetLegendGraphic';"
psql -qw -U postgres -h localhost -d ogam -c "UPDATE mapping.layer_service SET config = '{\"urls\":[\"http://<%= $ogam::vhost_servername %>/proxy/getwfs?\"],\"params\":{\"SERVICE\":\"WFS\",\"VERSION\":\"1.0.0\",\"REQUEST\":\"GetFeature\"}}' WHERE name = 'Local_Proxy_WFS_GetFeature';"
